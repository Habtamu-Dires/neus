/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getEnabledSubPlans } from '../fn/sbu-plans/get-enabled-sub-plans';
import { GetEnabledSubPlans$Params } from '../fn/sbu-plans/get-enabled-sub-plans';
import { getSubPlanById } from '../fn/sbu-plans/get-sub-plan-by-id';
import { GetSubPlanById$Params } from '../fn/sbu-plans/get-sub-plan-by-id';
import { getSubPlans } from '../fn/sbu-plans/get-sub-plans';
import { GetSubPlans$Params } from '../fn/sbu-plans/get-sub-plans';
import { SubPlanDto } from '../models/sub-plan-dto';
import { updateSubPlan } from '../fn/sbu-plans/update-sub-plan';
import { UpdateSubPlan$Params } from '../fn/sbu-plans/update-sub-plan';

@Injectable({ providedIn: 'root' })
export class SbuPlansService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getSubPlans()` */
  static readonly GetSubPlansPath = '/sub-plans';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSubPlans()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSubPlans$Response(params?: GetSubPlans$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SubPlanDto>>> {
    return getSubPlans(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSubPlans$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSubPlans(params?: GetSubPlans$Params, context?: HttpContext): Observable<Array<SubPlanDto>> {
    return this.getSubPlans$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SubPlanDto>>): Array<SubPlanDto> => r.body)
    );
  }

  /** Path part for operation `updateSubPlan()` */
  static readonly UpdateSubPlanPath = '/sub-plans';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSubPlan()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSubPlan$Response(params: UpdateSubPlan$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateSubPlan(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSubPlan$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSubPlan(params: UpdateSubPlan$Params, context?: HttpContext): Observable<{
}> {
    return this.updateSubPlan$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getSubPlanById()` */
  static readonly GetSubPlanByIdPath = '/sub-plans/{plan-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSubPlanById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSubPlanById$Response(params: GetSubPlanById$Params, context?: HttpContext): Observable<StrictHttpResponse<SubPlanDto>> {
    return getSubPlanById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSubPlanById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSubPlanById(params: GetSubPlanById$Params, context?: HttpContext): Observable<SubPlanDto> {
    return this.getSubPlanById$Response(params, context).pipe(
      map((r: StrictHttpResponse<SubPlanDto>): SubPlanDto => r.body)
    );
  }

  /** Path part for operation `getEnabledSubPlans()` */
  static readonly GetEnabledSubPlansPath = '/sub-plans/enabled';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEnabledSubPlans()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEnabledSubPlans$Response(params?: GetEnabledSubPlans$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SubPlanDto>>> {
    return getEnabledSubPlans(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEnabledSubPlans$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEnabledSubPlans(params?: GetEnabledSubPlans$Params, context?: HttpContext): Observable<Array<SubPlanDto>> {
    return this.getEnabledSubPlans$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SubPlanDto>>): Array<SubPlanDto> => r.body)
    );
  }

}
