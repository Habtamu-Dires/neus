/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getUserAnswers } from '../fn/user-exam/get-user-answers';
import { GetUserAnswers$Params } from '../fn/user-exam/get-user-answers';
import { saveUserAnswers } from '../fn/user-exam/save-user-answers';
import { SaveUserAnswers$Params } from '../fn/user-exam/save-user-answers';
import { UserExamDto } from '../models/user-exam-dto';

@Injectable({ providedIn: 'root' })
export class UserExamService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `saveUserAnswers()` */
  static readonly SaveUserAnswersPath = '/user-exam';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveUserAnswers()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveUserAnswers$Response(params: SaveUserAnswers$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return saveUserAnswers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveUserAnswers$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveUserAnswers(params: SaveUserAnswers$Params, context?: HttpContext): Observable<{
}> {
    return this.saveUserAnswers$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getUserAnswers()` */
  static readonly GetUserAnswersPath = '/user-exam/{exam-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserAnswers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserAnswers$Response(params: GetUserAnswers$Params, context?: HttpContext): Observable<StrictHttpResponse<UserExamDto>> {
    return getUserAnswers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserAnswers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserAnswers(params: GetUserAnswers$Params, context?: HttpContext): Observable<UserExamDto> {
    return this.getUserAnswers$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserExamDto>): UserExamDto => r.body)
    );
  }

}
