/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteUser } from '../fn/users/delete-user';
import { DeleteUser$Params } from '../fn/users/delete-user';
import { filterUser } from '../fn/users/filter-user';
import { FilterUser$Params } from '../fn/users/filter-user';
import { getAllUsers } from '../fn/users/get-all-users';
import { GetAllUsers$Params } from '../fn/users/get-all-users';
import { getPageOfUsers } from '../fn/users/get-page-of-users';
import { GetPageOfUsers$Params } from '../fn/users/get-page-of-users';
import { getUserAggregateData } from '../fn/users/get-user-aggregate-data';
import { GetUserAggregateData$Params } from '../fn/users/get-user-aggregate-data';
import { PageResponseUserDto } from '../models/page-response-user-dto';
import { saveUser } from '../fn/users/save-user';
import { SaveUser$Params } from '../fn/users/save-user';
import { toggleUserStatus } from '../fn/users/toggle-user-status';
import { ToggleUserStatus$Params } from '../fn/users/toggle-user-status';
import { UserAggregateData } from '../models/user-aggregate-data';
import { UserDto } from '../models/user-dto';

@Injectable({ providedIn: 'root' })
export class UsersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `toggleUserStatus()` */
  static readonly ToggleUserStatusPath = '/users/{user-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `toggleUserStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  toggleUserStatus$Response(params: ToggleUserStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return toggleUserStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `toggleUserStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  toggleUserStatus(params: ToggleUserStatus$Params, context?: HttpContext): Observable<{
}> {
    return this.toggleUserStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteUser()` */
  static readonly DeleteUserPath = '/users/{user-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser$Response(params: DeleteUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser(params: DeleteUser$Params, context?: HttpContext): Observable<void> {
    return this.deleteUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `saveUser()` */
  static readonly SaveUserPath = '/users/save/{email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  saveUser$Response(params: SaveUser$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return saveUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  saveUser(params: SaveUser$Params, context?: HttpContext): Observable<{
}> {
    return this.saveUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllUsers()` */
  static readonly GetAllUsersPath = '/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers$Response(params?: GetAllUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getAllUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers(params?: GetAllUsers$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getAllUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `getPageOfUsers()` */
  static readonly GetPageOfUsersPath = '/users/page';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPageOfUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPageOfUsers$Response(params?: GetPageOfUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseUserDto>> {
    return getPageOfUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPageOfUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPageOfUsers(params?: GetPageOfUsers$Params, context?: HttpContext): Observable<PageResponseUserDto> {
    return this.getPageOfUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseUserDto>): PageResponseUserDto => r.body)
    );
  }

  /** Path part for operation `filterUser()` */
  static readonly FilterUserPath = '/users/filter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `filterUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  filterUser$Response(params?: FilterUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseUserDto>> {
    return filterUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `filterUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  filterUser(params?: FilterUser$Params, context?: HttpContext): Observable<PageResponseUserDto> {
    return this.filterUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseUserDto>): PageResponseUserDto => r.body)
    );
  }

  /** Path part for operation `getUserAggregateData()` */
  static readonly GetUserAggregateDataPath = '/users/aggregate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserAggregateData()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserAggregateData$Response(params?: GetUserAggregateData$Params, context?: HttpContext): Observable<StrictHttpResponse<UserAggregateData>> {
    return getUserAggregateData(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserAggregateData$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserAggregateData(params?: GetUserAggregateData$Params, context?: HttpContext): Observable<UserAggregateData> {
    return this.getUserAggregateData$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserAggregateData>): UserAggregateData => r.body)
    );
  }

}
