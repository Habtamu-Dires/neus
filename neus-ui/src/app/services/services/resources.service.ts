/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createResource } from '../fn/resources/create-resource';
import { CreateResource$Params } from '../fn/resources/create-resource';
import { deleteResource } from '../fn/resources/delete-resource';
import { DeleteResource$Params } from '../fn/resources/delete-resource';
import { getListOfResources } from '../fn/resources/get-list-of-resources';
import { GetListOfResources$Params } from '../fn/resources/get-list-of-resources';
import { getPageOfResources } from '../fn/resources/get-page-of-resources';
import { GetPageOfResources$Params } from '../fn/resources/get-page-of-resources';
import { getResourceById } from '../fn/resources/get-resource-by-id';
import { GetResourceById$Params } from '../fn/resources/get-resource-by-id';
import { getResourceCollection } from '../fn/resources/get-resource-collection';
import { GetResourceCollection$Params } from '../fn/resources/get-resource-collection';
import { getResourceDetail } from '../fn/resources/get-resource-detail';
import { GetResourceDetail$Params } from '../fn/resources/get-resource-detail';
import { ListOfResourcesDto } from '../models/list-of-resources-dto';
import { PageResponseResourceDto } from '../models/page-response-resource-dto';
import { ResourceCollectionDto } from '../models/resource-collection-dto';
import { ResourceDto } from '../models/resource-dto';
import { updateResource } from '../fn/resources/update-resource';
import { UpdateResource$Params } from '../fn/resources/update-resource';
import { updateResourceContent } from '../fn/resources/update-resource-content';
import { UpdateResourceContent$Params } from '../fn/resources/update-resource-content';

@Injectable({ providedIn: 'root' })
export class ResourcesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getResourceById()` */
  static readonly GetResourceByIdPath = '/resources/{resource-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getResourceById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResourceById$Response(params: GetResourceById$Params, context?: HttpContext): Observable<StrictHttpResponse<ResourceDto>> {
    return getResourceById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getResourceById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResourceById(params: GetResourceById$Params, context?: HttpContext): Observable<ResourceDto> {
    return this.getResourceById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ResourceDto>): ResourceDto => r.body)
    );
  }

  /** Path part for operation `updateResource()` */
  static readonly UpdateResourcePath = '/resources/{resource-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateResource()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateResource$Response(params: UpdateResource$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateResource(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateResource$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateResource(params: UpdateResource$Params, context?: HttpContext): Observable<{
}> {
    return this.updateResource$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteResource()` */
  static readonly DeleteResourcePath = '/resources/{resource-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteResource()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteResource$Response(params: DeleteResource$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteResource(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteResource$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteResource(params: DeleteResource$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteResource$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateResourceContent()` */
  static readonly UpdateResourceContentPath = '/resources/content/{resource-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateResourceContent()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateResourceContent$Response(params: UpdateResourceContent$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateResourceContent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateResourceContent$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateResourceContent(params: UpdateResourceContent$Params, context?: HttpContext): Observable<{
}> {
    return this.updateResourceContent$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `createResource()` */
  static readonly CreateResourcePath = '/resources';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createResource()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createResource$Response(params?: CreateResource$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createResource(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createResource$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createResource(params?: CreateResource$Params, context?: HttpContext): Observable<{
}> {
    return this.createResource$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getPageOfResources()` */
  static readonly GetPageOfResourcesPath = '/resources/page';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPageOfResources()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPageOfResources$Response(params?: GetPageOfResources$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseResourceDto>> {
    return getPageOfResources(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPageOfResources$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPageOfResources(params?: GetPageOfResources$Params, context?: HttpContext): Observable<PageResponseResourceDto> {
    return this.getPageOfResources$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseResourceDto>): PageResponseResourceDto => r.body)
    );
  }

  /** Path part for operation `getListOfResources()` */
  static readonly GetListOfResourcesPath = '/resources/list';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getListOfResources()` instead.
   *
   * This method doesn't expect any request body.
   */
  getListOfResources$Response(params?: GetListOfResources$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ListOfResourcesDto>>> {
    return getListOfResources(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getListOfResources$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getListOfResources(params?: GetListOfResources$Params, context?: HttpContext): Observable<Array<ListOfResourcesDto>> {
    return this.getListOfResources$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ListOfResourcesDto>>): Array<ListOfResourcesDto> => r.body)
    );
  }

  /** Path part for operation `getResourceDetail()` */
  static readonly GetResourceDetailPath = '/resources/detail/{resource-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getResourceDetail()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResourceDetail$Response(params: GetResourceDetail$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getResourceDetail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getResourceDetail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResourceDetail(params: GetResourceDetail$Params, context?: HttpContext): Observable<{
}> {
    return this.getResourceDetail$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getResourceCollection()` */
  static readonly GetResourceCollectionPath = '/resources/collection/{resource-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getResourceCollection()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResourceCollection$Response(params: GetResourceCollection$Params, context?: HttpContext): Observable<StrictHttpResponse<ResourceCollectionDto>> {
    return getResourceCollection(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getResourceCollection$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResourceCollection(params: GetResourceCollection$Params, context?: HttpContext): Observable<ResourceCollectionDto> {
    return this.getResourceCollection$Response(params, context).pipe(
      map((r: StrictHttpResponse<ResourceCollectionDto>): ResourceCollectionDto => r.body)
    );
  }

}
